name: CMake_x64

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  ARCH: x64

jobs:
  test:
    timeout-minutes: 10
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Create image tag
        id: image_tag
        run: |
          CACHE_PATH="/tmp/docker_cache_${{ env.ARCH }}"
          IMAGE_HASH="${{ hashFiles('./Dockerfile') }}"
          VARIANT="$(TZ=UTC-9 date +%Y%m%d)_${IMAGE_HASH:0:7}"
          IMAGE_NAME="slcc_cmake_${{ env.ARCH }}"
          TAG="${IMAGE_NAME}:${VARIANT}"
          TAR_NAME="${IMAGE_NAME}_${VARIANT}.tar"
          TAR_PATH="${CACHE_PATH}/${TAR_NAME}"
          echo "TAG=${TAG}" >> $GITHUB_OUTPUT
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_OUTPUT
          echo "TAR_PATH=${TAR_PATH}" >> $GITHUB_OUTPUT
          echo "CACHE_PATH=${CACHE_PATH}" >> $GITHUB_OUTPUT
          echo "CACHE_KEY=${IMAGE_NAME}_${VARIANT}" >> $GITHUB_OUTPUT

      - name: Enable cache
        id: cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.image_tag.outputs.CACHE_PATH }}
          key: ${{ steps.image_tag.outputs.CACHE_KEY }}

      - name: Load image from cache if exists
        if: steps.cache.outputs.cache-hit == 'true'
        run: |
          docker load -i ${{ steps.image_tag.outputs.TAR_PATH }}

      - name: Build image if cache does not exist
        if: steps.cache.outputs.cache-hit != 'true'
        run: |
          docker build -t ${{ steps.image_tag.outputs.TAG }} .
          mkdir -p ${{ steps.image_tag.outputs.CACHE_PATH }}
          docker save ${{ steps.image_tag.outputs.TAG }} > ${{ steps.image_tag.outputs.TAR_PATH }}

      - name: Run tests in container
        run: |
          sudo chown -R 1000:1000 ${{ github.workspace }}
          docker run --rm -v ${{ github.workspace }}:/work -w /work/ex00  ${{ steps.image_tag.outputs.TAG }} make re && ./animal
